// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ItsWdfs.Csharp.Exam.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Employee.Employee", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid?>("TownId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fdbbf4d-fd52-44a1-bc6f-7407cb4eddf7"),
                            BirthDate = new DateTimeOffset(new DateTime(2015, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "ok@gipo.dev",
                            Gender = "Male",
                            Name = "John1",
                            Surname = "Doe",
                            TownId = new Guid("db75d4bf-7588-45c1-bdcf-b53859b3dfea")
                        },
                        new
                        {
                            Id = new Guid("f78054e0-dfe5-4063-9df7-30048ed0bc0d"),
                            BirthDate = new DateTimeOffset(new DateTime(2015, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "ok@gipo.dev",
                            Gender = "Male",
                            Name = "John2",
                            Surname = "Doe",
                            TownId = new Guid("e12d1843-c8d5-4921-b99e-21961d76eff5")
                        },
                        new
                        {
                            Id = new Guid("40e03028-a131-4a8d-a630-91ef293754a2"),
                            BirthDate = new DateTimeOffset(new DateTime(2015, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Email = "ok@gipo.dev",
                            Gender = "Male",
                            Name = "John3",
                            Surname = "Doe",
                            TownId = new Guid("edcd6feb-8677-4481-94f6-eb694b3f1509")
                        });
                });

            modelBuilder.Entity("Models.Town.Town", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodiceCatastale")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db75d4bf-7588-45c1-bdcf-b53859b3dfea"),
                            CodiceCatastale = "G224",
                            Name = "Padova",
                            Province = "PD"
                        },
                        new
                        {
                            Id = new Guid("e12d1843-c8d5-4921-b99e-21961d76eff5"),
                            CodiceCatastale = "L840",
                            Name = "Vicenza",
                            Province = "VI"
                        },
                        new
                        {
                            Id = new Guid("edcd6feb-8677-4481-94f6-eb694b3f1509"),
                            CodiceCatastale = "L407",
                            Name = "Treviso",
                            Province = "TV"
                        });
                });

            modelBuilder.Entity("Models.Employee.Employee", b =>
                {
                    b.HasOne("Models.Town.Town", "Town")
                        .WithMany("Employees")
                        .HasForeignKey("TownId");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("Models.Town.Town", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
